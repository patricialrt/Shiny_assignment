print(paste(round(coeff[["wt"]], 3), "vs", round(coeff[["wt"]] + coeff[["am1:wt"]], 3), "MPG per 1000*lb"))
print(paste(round(coeff[["wt"]], 3), "vs", round(coeff[["wt"]] + coeff[["am:wt"]], 3), "MPG per 1000*lb"))
- best.fit$coefficients
best.fit$coefficients
coeff[["am"]], 3)
coeff[["am"]])
coeff[["am"]]
coeff <- best.fit$coefficients
print(paste(round(coeff[["am1"]], 3), "MPG"))
---
4. Also according to the p-values of the *wt* and *am:hp* coefficients. Null hypothesis about equality to zero could *not* be rejected.
coeff <- best.fit$coefficients
print(paste(round(coeff[["am"]], 3), "MPG"))
print(paste(round(coeff[["wt"]], 3), "vs", round(coeff[["wt"]] + coeff[["am:wt"]], 3), "MPG per 1000*lb"))
fit.wt.hp.gear <- update(best.fit, mpg ~ am*gear*wt + am*gear*hp)
anova(best.fit, fit.wt.hp.gear)
summary(best.fit)
coeff <- best.fit$coefficients
print(paste(round(coeff[["am"]], 3), "MPG"))
print(paste(round(coeff[["wt"]], 3), "vs", round(coeff[["wt"]] + coeff[["am:wt"]], 3), "MPG per 1000*lb"))
coeff[["am:wt"]]
coeff <- best.fit$coefficients
best.fit$coefficients
best.fit <- lm(mpg~am + wt + hp, data = mtcars); anova(fit, best.fit)
coeff <- best.fit$coefficients
print(paste(round(coeff[["am1"]], 3), "MPG"))
coeff <- best.fit$coefficients
print(paste(round(coeff[["am"]], 3), "MPG"))
par(mfrow = c(1, 2))
plot(best.fit, c(3, 5))
ggplot(mtcars, aes(wt, mpg, color = am)) + geom_point(size = 2) +
geom_abline(intercept = coeff[[1]] + coeff[["hp"]] * mean(mtcars$hp),
slope = coeff[["wt"]], color = "red") +
geom_abline(intercept = coeff[[1]] + coeff[["am1"]] +
(coeff[["hp"]] + coeff[["am1:hp"]]) * mean(mtcars$hp),
slope=coeff[["wt"]] + coeff[["am1:wt"]], color="cyan") +
labs(x = "Weight (lb/1000)", y = "MPG")
best.fit <- lm(mpg~am + wt + hp, data = mtcars); anova(fit, best.fit)
summary(best.fit)
plot(best.fit)
par(mfrow = c(2, 2))
plot(best_model)
par(mfrow = c(2, 2))
plot(best.fit)
mtcars <- mtcars[!(mtcars$id %in% c("Cadillac Fleetwood", "Chrysler Imperial", "Lincoln Continental", "Maserati Bora")), ]
g <- ggplot(mtcars, aes(id, hat(wt))) + geom_point(size = 2) +
labs(title = "Weight Peak", x = "", y = "") +
theme(axis.text.x = element_text(angle = -45, hjust = 0))
print(g)
g <- ggplot(mtcars, aes(id, hat(hp))) + geom_point(size = 2) +
labs(title = "Horsepower Hat Values", x = "", y = "") +
theme(axis.text.x = element_text(angle = -45, hjust = 0))
print(g)
best.fit <- lm(mpg~am + wt + hp, data = mtcars1); anova(fit, best.fit)
mtcars1 <- mtcars[!(mtcars$id %in% c("Cadillac Fleetwood", "Chrysler Imperial", "Lincoln Continental", "Maserati Bora")), ]
mtcars1 <- mtcars[!(mtcars$id %in% c("Cadillac Fleetwood", "Chrysler Imperial", "Lincoln Continental", "Maserati Bora")), ]
mtcars1 <- mtcars[!(mtcars$id %in% c("Cadillac Fleetwood", "Chrysler Imperial", "Lincoln Continental", "Maserati Bora")), ]
mtcars1 <- mtcars[!(mtcars$id %in% c("Cadillac Fleetwood", "Chrysler Imperial", "Lincoln Continental", "Maserati Bora")), ]
mtcars1 <- mtcars[!(mtcars$id %in% c("Cadillac Fleetwood", "Chrysler Imperial", "Lincoln Continental", "Maserati Bora")), ]
data(mtcars); sort(cor(mtcars)[1,])
fit <- lm(mpg~am, data = mtcars1); summary(fit)
fig.width=6, fig.height=4)
message(sprintf("Run time: %s\nR version: %s", Sys.time(), R.Version()$version.string))
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
Dtrain <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DTest <- fread(url)
require(ggplot2)
require(caret)
install.packages("caret")
install.packages("rattle")
message(sprintf("Run time: %s\nR version: %s", Sys.time(), R.Version()$version.string))
require(ggplot2)
require(caret)
require(lattice)
require(rattle)
require(lattice)
require(randomForest)
install.packages("randomForest")
require(randomForest)
require(rpart.plot)
install.packages("part")
install.packages("rpart.plot")
require(rpart)
require(rpart.plot)
require(RColorBrewer)
require(rattle)
require(data.table)
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
train <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
test <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
summary(train)
head(train)
training <- training[, 6:dim(training)[2]]
treshold <- dim(training)[1] * 0.95
#Remove columns with more than 95% of NA or "" values
goodColumns <- !apply(training, 2, function(x) sum(is.na(x)) > treshold  || sum(x=="") > treshold)
training <- training[, goodColumns]
badColumns <- nearZeroVar(training, saveMetrics = TRUE)
training <- training[, badColumns$nzv==FALSE]
training$classe = factor(training$classe)
require(data.table)
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
# List of remaining variables after preprocessing
print(names(crossv))
training <- training[, 6:dim(training)[2]]
treshold <- dim(training)[1] * 0.95
#Remove columns with more than 95% of NA or "" values
goodColumns <- !apply(training, 2, function(x) sum(is.na(x)) > treshold  || sum(x=="") > treshold)
training <- training[, goodColumns]
badColumns <- nearZeroVar(training, saveMetrics = TRUE)
training <- training[, badColumns$nzv==FALSE]
training$classe = factor(training$classe)
```
```{r}
#Partition rows into training and crossvalidation
inTrain <- createDataPartition(training$classe, p = 0.6)[[1]]
crossv <- training[-inTrain,]
training <- training[ inTrain,]
inTrain <- createDataPartition(crossv$classe, p = 0.75)[[1]]
crossv_test <- crossv[ -inTrain,]
crossv <- crossv[inTrain,]
# List of remaining variables after preprocessing
print(names(filtered_training))
# List of remaining variables after preprocessing
print(names(crossv))
# List of remaining variables after preprocessing
print(names(training$classe))
training <- training[, 6:dim(training)[2]]
treshold <- dim(training)[1] * 0.95
#Remove columns with more than 95% of NA or "" values
goodColumns <- !apply(training, 2, function(x) sum(is.na(x)) > treshold  || sum(x=="") > treshold)
training <- training[, goodColumns]
badColumns <- nearZeroVar(training, saveMetrics = TRUE)
training <- training[, badColumns$nzv==FALSE]
training$classe = factor(training$classe)
#Partition rows into training and crossvalidation
inTrain <- createDataPartition(training$classe, p = 0.6)[[1]]
crossv <- training[-inTrain,]
training <- training[ inTrain,]
inTrain <- createDataPartition(crossv$classe, p = 0.75)[[1]]
crossv_test <- crossv[ -inTrain,]
crossv <- crossv[inTrain,]
testing <- testing[, 6:dim(testing)[2]]
testing <- testing[, goodColumns]
testing$classe <- NA
testing <- testing[, badColumns$nzv==FALSE]
#Train 3 different models
#mod1 <- train(classe ~ ., data=training, method="rf")
mod2 <- train(classe ~ ., data=training, method="gbm")
install.packages("gbm")
#Train 3 different models
#mod1 <- train(classe ~ ., data=training, method="rf")
mod2 <- train(classe ~ ., data=training, method="gbm")
mod3 <- train(classe ~ ., data=training, method="lda")
#pred1 <- predict(mod1, crossv)
pred2 <- predict(mod2, crossv)
pred3 <- predict(mod3, crossv)
mod2 <- train(classe ~ ., data=training, method="gbm")
require(ggplot2)
require(caret)
require(lattice)
require(randomForest)
require(rpart)
require(rpart.plot)
require(RColorBrewer)
require(rattle)
set.seed(15048)
mod2 <- train(classe ~ ., data=training, method="gbm")
mod3 <- train(classe ~ ., data=training, method="lda")
#pred1 <- predict(mod1, crossv)
pred2 <- predict(mod2, crossv)
require(caret, dependencies = TRUE)
install.packages(caret, dependencies = TRUE)
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
mod2 <- train(classe ~ ., data=training, method="gbm")
install.packages("train")
require(ggplot2)
require(caret)
require(lattice)
require(randomForest)
require(rpart)
require(rpart.plot)
require(RColorBrewer)
#require(rattle) R crashes when trying to open rattle....
require(gbm)
#Read the data
require(data.table)
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
#Clean Training data set
#Remove columns with more than 95% of NA or "" values
training <- training[, 6:dim(training)[2]]
treshold <- dim(training)[1] * 0.95
goodColumns <- !apply(training, 2, function(x) sum(is.na(x)) > treshold  || sum(x=="") > treshold)
training <- training[, goodColumns]
#Cleaning NearZeroVariance Variables Run this code to view possible NZV Variables:
badColumns <- nearZeroVar(training, saveMetrics = TRUE)
training <- training[, badColumns$nzv==FALSE]
training$classe = factor(training$classe)
#Partition rows into training and crossvalidation, 60% for training:
require(caret)
inTrain <- createDataPartition(training$classe, p = 0.6)[[1]]
crossv <- training[-inTrain,]
training <- training[ inTrain,]
dim(training)
#Clean Testing data set
#Remove columns with more than 95% of NA or "" values
testing <- training[, 6:dim(testing)[2]]
treshold <- dim(testing)[1] * 0.95
goodColumns <- !apply(testing, 2, function(x) sum(is.na(x)) > treshold  || sum(x=="") > treshold)
testing <- testing[, goodColumns]
#Cleaning NearZeroVariance Variables Run this code to view possible NZV Variables:
badColumns <- nearZeroVar(testing, saveMetrics = TRUE)
testing$classe = NA
testing <- testing[, badColumns$nzv==FALSE]
dim(testing)
#Train 3 different models
require(caret)
mod1 <- train(classe ~ ., data=training, method="rf")
set.seed(1234)
mod1 <- train(classe ~ ., data=training, method="rf")
mod2 <- train(classe ~ ., data=training, method="gbm")
modFit1 <- train(training$classe ~.,training,method="rpart")
modFit1
results1 <- modFit1$results
round(max(results1$Accuracy),4)*100
ctrl   <- trainControl(method = "cv", number = 4, allowParallel = TRUE)
modFit2 <- train(training$classe ~.,training,method="rf",prof=TRUE, trControl = ctrl)
modFit2
results2 <- modFit2$results
round(max(results2$Accuracy),4)*100
modFit3 <- train(training$classe ~.,training,method="glm") #fit generalized linear model
modFit3 <- train(training$classe ~.,training,method="gbm") #fit generalized boosted regreassion model
modFit3 <- randomForest(classe ~. , data=training)
modFit3
results3 <- modFite$results
results3 <- modFit3$results
round(max(resultse$Accuracy),4)*100
round(max(results3$Accuracy),4)*100
pred1 <- predict(modFit1, crossv)
pred2 <- predict(modFit2, crossv)
pred3 <- predict(modFit3, crossv)
confusionMatrix(pred1, crossv$classe)
confusionMatrix(pred2, crossv$classe)
confusionMatrix(pred3, crossv$classe)
round(max(results1$Accuracy),4)*100
round(max(results2$Accuracy),4)*100
round(max(results3$Accuracy),4)*100
modFit4 <- train(classe ~ ., method="gbm", data=training)
Err3 <- 1-results3$Accuracy
rownames(Err3) <- "Out-of-sample error"
Error3 #Out of sample error
Err3 #Out of sample error
round(max(results3$Accuracy),4)*100 #Accuracy
round(max(results1$Accuracy),4)*100
round(max(results2$Accuracy),4)*100
round(max(results3$Accuracy),4)*100 #Accuracy
pred1 <- predict(modFit1, crossv)
pred1
confusionMatrix(pred1, crossv$classe)
confusionMatrix(pred2, crossv$classe)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(pred2)
pml_write_files(pred2)
View(pml_write_files)
pml_write_files(pred2)
predictTEST <- predict(modFit2, data=testing)
predictTEST
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictTEST)
install.packages("shiny")
library(shiny)
version
library(shiny)
shiny::runApp()
setwd("~/Documents/shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp('~/Documents/BMI')
shiny::runApp('~/Documents/BMI')
shiny::runApp('~/Documents/BMI')
shiny::runApp('~/Documents/BMI')
runExample("03_reactivity")
summary(mtcars)
head(mtcars)
head(iris)
ls()
rm(ls())
swirl
library(swirl)
rm(list=ls())
shiny::runApp('~/Documents/census')
install.packages(c("maps", "mapproj"))
source("census/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
setwd("~/Documents/census")
percent_map(counties$white, "darkgreen", "% white")
source("census-app/helpers.R")
source("census/helpers.R")
counties <- readRDS("census/data/counties.rds")
counties <- readRDS("data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
source("helpers.R")
percent_map(counties$white, "darkgreen", "% white")
counties <- readRDS("data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
counties <- readRDS("data/counties.rds")
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
shiny::runApp()
runExample("01_hello")
help(faithful)
head(faithful)
head(mtcars)
summary(mtcars)
shiny::runApp('~/Documents/mtcars')
shiny::runApp('~/Documents/mtcars')
runExample("03_reactivity")
runExample("04_mpg")
shiny::runApp('~/Documents/mtcars')
shiny::runApp('~/Documents/mtcars')
runExample("03_reactivity")
runExample("01_hello")
shiny::runApp('~/Documents/mtcars')
shiny::runApp('~/Documents/mtcars')
shiny::runApp('~/Documents/mtcars')
shiny::runApp('~/Documents/mtcars')
shiny::runApp('~/Documents/mtcars')
runExample("01_hello")
shiny::runApp('~/Documents/mtcars')
shiny::runApp('~/Documents/mtcars')
head(galton)
library(UsingR)
library(HistData)
install.packages("HistData")
library(HistData)
head(galton)
library(galton)
data("Galton")
head(Galton)
data(Pyx)
data("Pyx")
head(Pyx)
data("Guerry")
head(Guerry)
runExample("03_reactivity")
runExample("04_mpg")
shiny::runApp('~/Documents/Guerry')
shiny::runApp('~/Documents/Guerry')
runExample("04_mpg")
head(mtcars)
shiny::runApp('~/Documents/Guerry')
head(Guerry)
shiny::runApp('~/Documents/Guerry')
runExample("03_reactivity")
runExample("02_text")
runExample("01_hello")
shiny::runApp('~/Documents/Guerry')
shiny::runApp('~/Documents/Guerry')
head(Guerry)
shiny::runApp('~/Documents/Guerry')
runExample("02_text")
runExample("03_reactivity")
shiny::runApp('~/Documents/Guerry')
shiny::runApp('~/Documents/Guerry')
shiny::runApp('~/Documents/Guerry')
shiny::runApp('~/Documents/Guerry')
shiny::runApp('~/Documents/Guerry')
install.packages("DT")
library("DT", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
shiny::runApp('~/Documents/Guerry')
shiny::runApp('~/Documents/Guerry')
head(mtcars)
head(mpg)
head(Guerry)
shiny::runApp('~/Documents/Guerry')
shiny::runApp('~/Documents/Guerry')
names(Guerry)[[2]]
names(iris)[[2]]
head(iris)
shiny::runApp('~/Documents/kmeans')
head(Guerry)
Guerry1 <- data("Guerry")
Guerry1$Region <- NULL
Guerry1
Guerry1 <- data("Guerry")
Guerry1$Region <- NULL
head(Guerry1)
Guerry1 <- data.frame(data("Guerry"))
Guerry1$Region <- NULL
head(Guerry1)
Guerry1 <- data.frame(data("Guerry"))
head(Guerry1)
Guerry1 <- data("Guerry")
Guerry2 <- Guerry1(c(-2,-3,-10))
Guerry1 <- data("Guerry")
head(Guerry1)
head(Guerry)
Guerry$Region <- NULL
Guerry
Guerry$Region <- Guerry$Department <-  Guerry$MainCity <-NULL
head(Guerry)
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
rm(list=ls())
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
head(iris)
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
?Guerry
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
shiny::runApp('~/Documents/kmeans')
install.packages('devtools')
shinyapps::setAccountInfo(name='patricialrt', token='C549450B02711CF25843537B1309EE7C', secret='nCQ2kPLZQaigiaFu5Uiq7njmY6B8Q+T0p45004yT')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='patricialrt', token='C549450B02711CF25843537B1309EE7C', secret='nCQ2kPLZQaigiaFu5Uiq7njmY6B8Q+T0p45004yT')
library(shinyapps)
shinyapps::deployApp('patricia/Documents/Shiny_Assignment')
shinyapps::deployApp('~/patricia/Documents/Shiny_Assignment')
shinyapps::deployApp('~/patricia/Documents/Shiny_assignment')
shinyapps::deployApp('~/patricia/Documents/Shiny_assignment')
setwd("~/Documents/Shiny_assignment")
shinyapps::deployApp('~/patricia/Documents/Shiny_assignment')
shinyapps::deployApp('~/Documents/Shiny_assignment')
shiny::runApp()
shiny::runApp()
runExample("04_mpg")
data("Guerry")
shiny::runApp()
runExample("04_mpg")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data(Guerry)
head(guerry)
head(Guerry)
rm(list=ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
author("myslidify")
##Slide2
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish(user = "patricialrt", repo = "Shiny_assignment")
publish(user = "patricialrt", repo = "slidify")
publish_github(patricialrt, Guerry)
publish_github("patricialrt", "Guerry")
publish_github("patricialrt", "Guerry")
